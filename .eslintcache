[{"C:\\Users\\hybrus\\Desktop\\Visiting Report\\src\\index.js":"1","C:\\Users\\hybrus\\Desktop\\Visiting Report\\src\\App.js":"2","C:\\Users\\hybrus\\Desktop\\Visiting Report\\src\\app\\store.js":"3","C:\\Users\\hybrus\\Desktop\\Visiting Report\\src\\helpers\\PrivateRoute.js":"4","C:\\Users\\hybrus\\Desktop\\Visiting Report\\src\\elements\\Navigation.js":"5","C:\\Users\\hybrus\\Desktop\\Visiting Report\\src\\components\\User\\UserSlice.js":"6","C:\\Users\\hybrus\\Desktop\\Visiting Report\\src\\components\\User\\Login.js":"7","C:\\Users\\hybrus\\Desktop\\Visiting Report\\src\\components\\guest\\Guests.js":"8","C:\\Users\\hybrus\\Desktop\\Visiting Report\\src\\components\\guest\\GuestForm.js":"9","C:\\Users\\hybrus\\Desktop\\Visiting Report\\src\\components\\guest\\GuestLogout.js":"10","C:\\Users\\hybrus\\Desktop\\Visiting Report\\src\\components\\user\\UserSlice.js":"11","C:\\Users\\hybrus\\Desktop\\Visiting Report\\src\\components\\user\\Login.js":"12","C:\\Users\\hybrus\\Desktop\\Visiting Report\\src\\components\\guest\\EmployeeSlice.js":"13","C:\\Users\\hybrus\\Desktop\\Visiting Report\\src\\components\\guest\\GuestSlice.js":"14"},{"size":400,"mtime":1663144407724,"results":"15","hashOfConfig":"16"},{"size":914,"mtime":1663163776610,"results":"17","hashOfConfig":"16"},{"size":406,"mtime":1663163338723,"results":"18","hashOfConfig":"16"},{"size":402,"mtime":1612371497000,"results":"19","hashOfConfig":"16"},{"size":2580,"mtime":1663164039173,"results":"20","hashOfConfig":"16"},{"size":3260,"mtime":1663149234362,"results":"21","hashOfConfig":"16"},{"size":2855,"mtime":1663147698137,"results":"22","hashOfConfig":"16"},{"size":1591,"mtime":1663165443799,"results":"23","hashOfConfig":"16"},{"size":4349,"mtime":1663165662745,"results":"24","hashOfConfig":"16"},{"size":1892,"mtime":1663165647132,"results":"25","hashOfConfig":"16"},{"size":3260,"mtime":1663149234362,"results":"26","hashOfConfig":"16"},{"size":2746,"mtime":1663165761957,"results":"27","hashOfConfig":"16"},{"size":1620,"mtime":1663148979163,"results":"28","hashOfConfig":"16"},{"size":975,"mtime":1663165375246,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"ojfwye",{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"32"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"45"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"45"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\hybrus\\Desktop\\Visiting Report\\src\\index.js",[],["68","69"],"C:\\Users\\hybrus\\Desktop\\Visiting Report\\src\\App.js",[],"C:\\Users\\hybrus\\Desktop\\Visiting Report\\src\\app\\store.js",[],"C:\\Users\\hybrus\\Desktop\\Visiting Report\\src\\helpers\\PrivateRoute.js",[],"C:\\Users\\hybrus\\Desktop\\Visiting Report\\src\\elements\\Navigation.js",["70","71"],"import React, { useEffect } from 'react'\r\nimport { Container, Nav, Navbar, NavDropdown } from 'react-bootstrap'\r\nimport { userSelector, fetchUserBytoken, clearState, destroyUser } from '../components/user/UserSlice';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { NavLink, useHistory } from 'react-router-dom';\r\nimport { getEmployeeLists } from '../components/guest/EmployeeSlice';\r\n\r\nexport const Navigation = () => {\r\n    const history = useHistory();\r\n    const dispatch = useDispatch();\r\n    const { first_name, isError } = useSelector(userSelector);\r\n\r\n    useEffect(() => {\r\n        if (history.location.pathname !== '/login' && !!!first_name){\r\n            dispatch(fetchUserBytoken({}));\r\n            dispatch(getEmployeeLists({}));\r\n        }\r\n    }, [history.location]);\r\n\r\n    useEffect(() => {\r\n        if (isError) {\r\n            dispatch(clearState());\r\n            history.push('/login');\r\n        }\r\n    }, [isError]);\r\n\r\n    const onLogOut = () => {\r\n        dispatch(destroyUser({}));\r\n        history.push('/login');\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {!!first_name &&\r\n                <Navbar variant='dark' bg=\"dark\">\r\n                    <Container>\r\n                        <Navbar.Brand style={{ cursor: 'pointer' }} onClick={() => history.push('/')}>Guest Report</Navbar.Brand>\r\n                        <Navbar.Toggle />\r\n                        <Navbar.Collapse className=\"justify-content-end\">\r\n                            <Nav className=\"me-auto\">\r\n                                <NavLink to=\"/\" exact={true} activeClassName=\"active\" className=\"nav-link\">Home</NavLink>\r\n                                <NavDropdown title=\"Guest\" id=\"basic-nav-dropdown\">\r\n                                    <NavLink to=\"/guest-in\" activeClassName=\"active\" className=\"dropdown-item\">Check In</NavLink>\r\n                                    <NavLink to=\"/guest-out\" activeClassName=\"active\" className=\"dropdown-item\">Check Out</NavLink>\r\n                                </NavDropdown>\r\n                            </Nav>\r\n                            <Nav className=\"ms-auto\">\r\n                                <Navbar.Text>\r\n                                    Signed in as: <strong>{first_name}</strong>\r\n                                </Navbar.Text>\r\n                                <Nav.Link onClick={onLogOut} className=\"text-danger\"> Logout</Nav.Link>\r\n                            </Nav>\r\n                        </Navbar.Collapse>\r\n                    </Container>\r\n                </Navbar>\r\n            }\r\n        </>\r\n    )\r\n}","C:\\Users\\hybrus\\Desktop\\Visiting Report\\src\\components\\User\\UserSlice.js",["72","73"],"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\n\nexport const loginUser = createAsyncThunk(\n  'users/login',\n  async ({ email, password }, thunkAPI) => {\n    let formData = new FormData();\n    formData.append('email', email)\n    formData.append('password', password)\n    try {\n      const response = await fetch(\n        'https://api-dev.momenttrack.com/auth/default/system/login',\n        {\n          method: 'POST',\n          body: formData,\n        }\n      );\n\n      let data = await response.json();\n      if (response.status === 200) {\n        localStorage.setItem('token', data.data.access_token);\n        return data;\n      } else {\n        return thunkAPI.rejectWithValue(data);\n      }\n    } catch (e) {\n      thunkAPI.rejectWithValue(e.response.data);\n    }\n  }\n);\n\nexport const fetchUserBytoken = createAsyncThunk(\n  'users/fetchUserByToken',\n  async ({ }, thunkAPI) => {\n    try {\n      const response = await fetch(\n        'https://api-dev.momenttrack.com/api/lexcorp/users/me',\n        {\n          method: 'GET',\n          headers: {\n            Accept: 'application/json',\n            Authorization: 'Bearer ' + localStorage.getItem('token'),\n            'Content-Type': 'application/json',\n          },\n        }\n      );\n      let data = await response.json();\n      if (response.status === 200) {\n        return { ...data.data };\n      } else {\n        return thunkAPI.rejectWithValue(data);\n      }\n    } catch (e) {\n      return thunkAPI.rejectWithValue(e.response.data);\n    }\n  }\n);\n\nexport const destroyUser = createAsyncThunk(\n  'users/logout',\n  async ({ }, thunkAPI) => {\n    localStorage.removeItem('token');\n    return {}\n  }\n);\n\nexport const userSlice = createSlice({\n  name: 'user',\n  initialState: {\n    first_name: '',\n    email: '',\n    guestList: '',\n    isFetching: false,\n    isSuccess: false,\n    isError: false,\n    errorMessage: '',\n  },\n  reducers: {\n    clearState: (state) => {\n      state.isError = false;\n      state.isSuccess = false;\n      state.isFetching = false;\n\n      return state;\n    },\n  },\n  extraReducers: {\n    [destroyUser.fulfilled]: (state, { payload }) => {\n      state.email = \"\";\n      state.first_name = \"\";\n      state.isFetching = false;\n      state.isSuccess = false;\n      return state;\n    },\n    [loginUser.fulfilled]: (state, { payload }) => {\n      state.email = payload.email;\n      state.first_name = payload.first_name;\n      state.isFetching = false;\n      state.isSuccess = true;\n      return state;\n    },\n    [loginUser.rejected]: (state, { payload }) => {\n      state.isFetching = false;\n      state.isError = true;\n      state.errorMessage = payload.message;\n    },\n    [loginUser.pending]: (state) => {\n      state.isFetching = true;\n    },\n    [fetchUserBytoken.pending]: (state) => {\n      state.isFetching = true;\n    },\n    [fetchUserBytoken.fulfilled]: (state, { payload }) => {\n      state.isFetching = false;\n      state.isSuccess = true;\n\n      state.email = payload.email;\n      state.first_name = payload.first_name;\n    },\n    [fetchUserBytoken.rejected]: (state) => {\n      state.isFetching = false;\n      state.isError = true;\n    },\n  },\n});\n\nexport const { clearState } = userSlice.actions;\n\nexport const userSelector = (state) => state.user;\n",["74","75"],"C:\\Users\\hybrus\\Desktop\\Visiting Report\\src\\components\\User\\Login.js",["76","77","78","79","80","81"],"import React, { useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useForm } from 'react-hook-form';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { loginUser, userSelector, clearState } from './UserSlice';\nimport toast from 'react-hot-toast';\nimport { useHistory } from 'react-router-dom';\nimport { Button, Form } from 'react-bootstrap';\n\nconst Login = ({ }) => {\n    const dispatch = useDispatch();\n    const history = useHistory();\n    const { register, errors, handleSubmit } = useForm();\n    const { isFetching, isSuccess, isError, errorMessage } = useSelector(\n        userSelector\n    );\n    const onSubmit = (data) => {\n        dispatch(loginUser(data));\n    };\n\n    useEffect(() => {\n        return () => {\n            dispatch(clearState());\n        };\n    }, []);\n\n    useEffect(() => {\n        if (isError) {\n            toast.error(errorMessage);\n            dispatch(clearState());\n        }\n\n        if (isSuccess) {\n            dispatch(clearState());\n            history.push('/');\n        }\n    }, [isError, isSuccess]);\n\n    return (\n        <>\n            <div className=\"d-flex justify-content-center align-items-center vh-100\">\n                <div>\n                    <div>\n                        <h2>\n                            Sign in to your account\n                        </h2>\n                    </div>\n                    <Form onSubmit={handleSubmit(onSubmit)} method=\"POST\">\n                        <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\n                            <Form.Label>Email address</Form.Label>\n                            <Form.Control\n                                name=\"email\"\n                                type=\"email\"\n                                autoComplete=\"email\"\n                                ref={register({\n                                    pattern: /^[a-zA-Z0-9+_.-]+@[a-zA-Z0-9.-]+$/i,\n                                })}\n                                required\n                                className=\"\" />\n                        </Form.Group>\n\n                        <Form.Group className=\"mb-3\" controlId=\"formBasicPassword\">\n                            <Form.Label>Password</Form.Label>\n                            <Form.Control\n                                type=\"password\"\n                                name=\"password\"\n                                ref={register({ required: true })}\n                                autoComplete=\"current-password\"\n                                required\n                            />\n                        </Form.Group>\n                        <Button variant=\"primary\" type=\"submit\">\n                            Submit\n                        </Button>\n                    </Form>\n                </div>\n            </div>\n        </>\n    );\n};\n\nexport default Login;\n","C:\\Users\\hybrus\\Desktop\\Visiting Report\\src\\components\\guest\\Guests.js",["82","83"],"import React from 'react'\r\nimport { Container, Table } from 'react-bootstrap'\r\n\r\nimport { useSelector } from 'react-redux';\r\nimport { guestListSelector } from '../guest/GuestSlice';\r\n\r\nexport const Guest = () => {\r\n\r\n    const { guests } = useSelector(guestListSelector);\r\n\r\n    return (\r\n        <Container className='mt-5'>\r\n            <Table striped bordered hover>\r\n                <thead>\r\n                    <tr>\r\n                        <th>ID</th>\r\n                        <th>Name</th>\r\n                        <th>Country</th>\r\n                        <th>Employee</th>\r\n                        <th>Date In</th>\r\n                        <th>Date Out</th>\r\n                        <th>Status</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {guests?.map(obj => {\r\n                        return (\r\n                            <tr key={obj.id}>\r\n                                <td>{obj.id}</td>\r\n                                <td>{obj.name}</td>\r\n                                <td>{obj.country}</td>\r\n                                <td>{obj.employee}</td>\r\n                                <td>{obj.time_in}</td>\r\n                                <td>{obj.time_out}</td>\r\n                                <td>{obj.visit_status}</td>\r\n                            </tr>\r\n                        )\r\n                    })}\r\n                </tbody>\r\n            </Table>\r\n\r\n            {!!!guests || (!!guests && guests.length) <= 0 && <span className='text-muted'>* no guests to show</span>}\r\n        </Container>\r\n    )\r\n\r\n}","C:\\Users\\hybrus\\Desktop\\Visiting Report\\src\\components\\guest\\GuestForm.js",["84","85"],"import dayjs from 'dayjs';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Button, Card, Container, Form } from 'react-bootstrap';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { employeeListSelector, getEmployeeLists } from './EmployeeSlice';\r\nimport { addState } from './GuestSlice';\r\n\r\nexport const GuestForm = () => {\r\n    const dispatch = useDispatch();\r\n    const { employees } = useSelector(employeeListSelector);\r\n    const { register, handleSubmit, reset, formState: { errors } } = useForm();\r\n    const [guestID, setGuestID] = useState()\r\n\r\n    const history = useHistory()\r\n\r\n    const makeid = () => {\r\n        var result = '';\r\n        var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n        var charactersLength = characters.length;\r\n        for (var i = 0; i < 6; i++) {\r\n            result += characters.charAt(Math.floor(Math.random() *\r\n                charactersLength));\r\n        }\r\n        return result.toUpperCase();\r\n    }\r\n\r\n    const onSubmit = (formData) => {\r\n        let data = formData;\r\n        data.id = makeid()\r\n        setGuestID(data.id)\r\n        data.visit_status = 'in'\r\n        data.time_in = dayjs().format('MM/DD/YYYY hh:mm A')\r\n        data.time_out = \"\"\r\n        dispatch(addState(data))\r\n        reset()\r\n    }\r\n\r\n    useEffect(() => {\r\n        const timer = setTimeout(() => setGuestID(), 20000);\r\n        return () => clearTimeout(timer);\r\n    }, [guestID]);\r\n\r\n    return (\r\n        <Container className='d-flex align-items-center align-center w-100 pt-5' style={{ placeContent: 'center' }}>\r\n            <Card style={{ width: '18rem' }}>\r\n                <Form onSubmit={handleSubmit(onSubmit)}>\r\n                    <Card.Body>\r\n                        <Card.Title>Guest Sign in</Card.Title>\r\n\r\n                        <div className={!!guestID ? 'd-block' : 'd-none'}>\r\n                            <h6 className='mt-3 mb-1'>Your Guest ID:</h6>\r\n                            <h1>{guestID}</h1>\r\n                            <p>*use this ID to logout</p>\r\n                        </div>\r\n\r\n                        <div className={!!guestID ? 'd-none' : 'd-block'}>\r\n\r\n                            <Form.Group className=\"mb-3\" >\r\n                                <Form.Label>Name</Form.Label> {!!errors?.name && <span className='text-danger'>* required</span>}\r\n                                <Form.Control type=\"text\" placeholder=\"Full Name\" {...register('name', { required: true })} />\r\n                            </Form.Group>\r\n\r\n                            <Form.Group className=\"mb-3\" >\r\n                                <Form.Label>Country</Form.Label> {!!errors?.country && <span className='text-danger'>* required</span>}\r\n                                <Form.Control type=\"text\" placeholder=\"Country\" {...register(\"country\", { required: true })} />\r\n                            </Form.Group>\r\n\r\n                            <Form.Group className=\"mb-3\" >\r\n                                <Form.Label>Visiting Employee</Form.Label>  {!!errors?.employee && <span className='text-danger'>* required</span>}\r\n                                <Form.Select aria-label=\"Select Employee to visit\" {...register(\"employee\", { required: true })}>\r\n                                    <option value=\"\">Select Employee to visit</option>\r\n                                    {employees?.map(obj => {\r\n                                        return (\r\n                                            <option key={obj.id} value={!!obj?.first_name ? obj.first_name : obj.email}>{!!obj?.first_name ? obj.first_name : obj.email}</option>\r\n                                        )\r\n                                    })}\r\n                                </Form.Select>\r\n                            </Form.Group>\r\n\r\n                        </div>\r\n\r\n                        {!!guestID ?\r\n                            <Button variant=\"warning\" type=\"button\" onClick={() => setGuestID()}>Clear</Button>\r\n                            :\r\n                            <Button variant=\"primary\" type=\"submit\">Submit</Button>\r\n                        }\r\n                    </Card.Body>\r\n                </Form>\r\n            </Card>\r\n        </Container>\r\n    );\r\n};\r\n","C:\\Users\\hybrus\\Desktop\\Visiting Report\\src\\components\\guest\\GuestLogout.js",["86"],"import React, { useEffect, useState } from 'react';\r\nimport { Alert, Button, Card, Container, Form } from 'react-bootstrap';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useDispatch } from 'react-redux';\r\nimport { getEmployeeLists } from './EmployeeSlice';\r\nimport { outState } from './GuestSlice';\r\n\r\nexport const GuestLogout = () => {\r\n    const dispatch = useDispatch();\r\n    const { register, handleSubmit, reset, formState: { errors } } = useForm();\r\n\r\n    const [message, setMessage] = useState()\r\n\r\n    useEffect(() => {\r\n        const timer = setTimeout(() => setMessage(), 10000);\r\n        return () => clearTimeout(timer);\r\n    }, [message]);\r\n\r\n    const onSubmit = (formData) => {\r\n        setMessage(false)\r\n        dispatch(outState(formData.id))\r\n        setMessage(true)\r\n        reset()\r\n    }\r\n\r\n    return (\r\n        <Container className='d-flex align-items-center align-center w-100 pt-5' style={{ placeContent: 'center' }}>\r\n            <Card style={{ width: '18rem' }}>\r\n                <Form onSubmit={handleSubmit(onSubmit)}>\r\n\r\n                    {!!message &&\r\n                        <Alert variant=\"success\">\r\n                            Guest Logged Out!\r\n                        </Alert>\r\n                    }\r\n                    <Card.Body>\r\n                        <Card.Title>Guest Logout</Card.Title>\r\n                        <Form.Group className=\"mb-3\" >\r\n                            <Form.Label>Guest ID</Form.Label> {!!errors?.id && <span className='text-danger'>* required</span>}\r\n                            <Form.Control type=\"text\" placeholder=\"guest ID\" {...register(\"id\", { required: true })} />\r\n                        </Form.Group>\r\n\r\n                        <Button variant=\"primary\" type=\"submit\">Logout</Button>\r\n                    </Card.Body>\r\n\r\n                </Form>\r\n            </Card>\r\n        </Container>\r\n    );\r\n};\r\n","C:\\Users\\hybrus\\Desktop\\Visiting Report\\src\\components\\user\\UserSlice.js",["87","88"],"C:\\Users\\hybrus\\Desktop\\Visiting Report\\src\\components\\user\\Login.js",["89","90","91","92","93","94"],"import React, { useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useForm } from 'react-hook-form';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { loginUser, userSelector, clearState } from './UserSlice';\nimport toast from 'react-hot-toast';\nimport { useHistory } from 'react-router-dom';\nimport { Button, Form } from 'react-bootstrap';\n\nconst Login = ({ }) => {\n    const dispatch = useDispatch();\n    const history = useHistory();\n    const { register, errors, handleSubmit } = useForm();\n    const { isFetching, isSuccess, isError, errorMessage } = useSelector(\n        userSelector\n    );\n    const onSubmit = (data) => {\n        dispatch(loginUser(data));\n    };\n\n    useEffect(() => {\n        return () => {\n            dispatch(clearState());\n        };\n    }, []);\n\n    useEffect(() => {\n        if (isError) {\n            toast.error(errorMessage);\n            dispatch(clearState());\n        }\n\n        if (isSuccess) {\n            dispatch(clearState());\n            history.push('/');\n        }\n    }, [isError, isSuccess]);\n\n    return (\n        <>\n            <div className=\"d-flex justify-content-center align-items-center vh-100\">\n                <div>\n                    <div>\n                        <h2>\n                            Sign in to your account\n                        </h2>\n                    </div>\n                    <Form onSubmit={handleSubmit(onSubmit)} method=\"POST\">\n                        <Form.Group className=\"mb-3\" controlId=\"formEmail\">\n                            <Form.Label>Email</Form.Label>\n                            <Form.Control\n                                type=\"email\"\n                                autoComplete=\"email\"\n                                {...register(\"email\", {\n                                    pattern: /^[a-zA-Z0-9+_.-]+@[a-zA-Z0-9.-]+$/i,\n                                })}\n                                required\n                            />\n                        </Form.Group>\n\n                        <Form.Group className=\"mb-3\" controlId=\"formPassword\">\n                            <Form.Label>Password</Form.Label>\n                            <Form.Control\n                                type=\"password\"\n                                {...register(\"password\", { required: true })}\n                                autoComplete=\"current-password\"\n                                required\n                            />\n                        </Form.Group>\n                        <Button variant=\"primary\" type=\"submit\">\n                            Submit\n                        </Button>\n                    </Form>\n                </div>\n            </div>\n        </>\n    );\n};\n\nexport default Login;\n","C:\\Users\\hybrus\\Desktop\\Visiting Report\\src\\components\\guest\\EmployeeSlice.js",["95"],"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\n\r\nexport const getEmployeeLists = createAsyncThunk(\r\n    'employeeLists/employee',\r\n    async ({ }, thunkAPI) => {\r\n        try {\r\n            const response = await fetch(\r\n                'https://api-dev.momenttrack.com/api/lexcorp/users',\r\n                {\r\n                    method: 'GET',\r\n                    headers: {\r\n                        Accept: 'application/json',\r\n                        Authorization: 'Bearer ' + localStorage.getItem('token'),\r\n                        'Content-Type': 'application/json',\r\n                    },\r\n                }\r\n            );\r\n            let data = await response.json();\r\n\r\n            if (response.status === 200) {\r\n                return { ...data };\r\n            } else {\r\n                return thunkAPI.rejectWithValue(data);\r\n            }\r\n        } catch (e) {\r\n            return thunkAPI.rejectWithValue(e.response.data);\r\n        }\r\n    }\r\n);\r\n\r\nexport const employeeListSlice = createSlice({\r\n    name: 'employeeList',\r\n    initialState: {\r\n        employees:[]\r\n    },\r\n    reducers: {\r\n        clearState: (state) => {\r\n            return state;\r\n        },\r\n    },\r\n    extraReducers: {\r\n        [getEmployeeLists.pending]: (state) => {\r\n        },\r\n        [getEmployeeLists.fulfilled]: (state, { payload }) => {\r\n            state.employees = payload.data;\r\n        },\r\n        [getEmployeeLists.rejected]: (state) => {\r\n        },\r\n    },\r\n});\r\n\r\nexport const { clearState } = employeeListSlice.actions;\r\n\r\nexport const employeeListSelector = (state) => state.employees;\r\n","C:\\Users\\hybrus\\Desktop\\Visiting Report\\src\\components\\guest\\GuestSlice.js",[],{"ruleId":"96","replacedBy":"97"},{"ruleId":"98","replacedBy":"99"},{"ruleId":"100","severity":1,"message":"101","line":18,"column":8,"nodeType":"102","endLine":18,"endColumn":26,"suggestions":"103"},{"ruleId":"100","severity":1,"message":"104","line":25,"column":8,"nodeType":"102","endLine":25,"endColumn":17,"suggestions":"105"},{"ruleId":"106","severity":1,"message":"107","line":34,"column":10,"nodeType":"108","messageId":"109","endLine":34,"endColumn":13},{"ruleId":"106","severity":1,"message":"107","line":61,"column":10,"nodeType":"108","messageId":"109","endLine":61,"endColumn":13},{"ruleId":"96","replacedBy":"110"},{"ruleId":"98","replacedBy":"111"},{"ruleId":"112","severity":1,"message":"113","line":2,"column":10,"nodeType":"114","messageId":"115","endLine":2,"endColumn":14},{"ruleId":"106","severity":1,"message":"107","line":10,"column":16,"nodeType":"108","messageId":"109","endLine":10,"endColumn":19},{"ruleId":"112","severity":1,"message":"116","line":13,"column":23,"nodeType":"114","messageId":"115","endLine":13,"endColumn":29},{"ruleId":"112","severity":1,"message":"117","line":14,"column":13,"nodeType":"114","messageId":"115","endLine":14,"endColumn":23},{"ruleId":"100","severity":1,"message":"118","line":25,"column":8,"nodeType":"102","endLine":25,"endColumn":10,"suggestions":"119"},{"ruleId":"100","severity":1,"message":"120","line":37,"column":8,"nodeType":"102","endLine":37,"endColumn":28,"suggestions":"121"},{"ruleId":"122","severity":1,"message":"123","line":42,"column":24,"nodeType":"124","messageId":"125","endLine":42,"endColumn":26},{"ruleId":"122","severity":1,"message":"123","line":42,"column":60,"nodeType":"124","messageId":"125","endLine":42,"endColumn":62},{"ruleId":"112","severity":1,"message":"126","line":7,"column":32,"nodeType":"114","messageId":"115","endLine":7,"endColumn":48},{"ruleId":"112","severity":1,"message":"127","line":16,"column":11,"nodeType":"114","messageId":"115","endLine":16,"endColumn":18},{"ruleId":"112","severity":1,"message":"126","line":5,"column":10,"nodeType":"114","messageId":"115","endLine":5,"endColumn":26},{"ruleId":"106","severity":1,"message":"107","line":34,"column":10,"nodeType":"108","messageId":"109","endLine":34,"endColumn":13},{"ruleId":"106","severity":1,"message":"107","line":61,"column":10,"nodeType":"108","messageId":"109","endLine":61,"endColumn":13},{"ruleId":"112","severity":1,"message":"113","line":2,"column":10,"nodeType":"114","messageId":"115","endLine":2,"endColumn":14},{"ruleId":"106","severity":1,"message":"107","line":10,"column":16,"nodeType":"108","messageId":"109","endLine":10,"endColumn":19},{"ruleId":"112","severity":1,"message":"116","line":13,"column":23,"nodeType":"114","messageId":"115","endLine":13,"endColumn":29},{"ruleId":"112","severity":1,"message":"117","line":14,"column":13,"nodeType":"114","messageId":"115","endLine":14,"endColumn":23},{"ruleId":"100","severity":1,"message":"118","line":25,"column":8,"nodeType":"102","endLine":25,"endColumn":10,"suggestions":"128"},{"ruleId":"100","severity":1,"message":"120","line":37,"column":8,"nodeType":"102","endLine":37,"endColumn":28,"suggestions":"129"},{"ruleId":"106","severity":1,"message":"107","line":5,"column":12,"nodeType":"108","messageId":"109","endLine":5,"endColumn":15},"no-native-reassign",["130"],"no-negated-in-lhs",["131"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch' and 'first_name'. Either include them or remove the dependency array.","ArrayExpression",["132"],"React Hook useEffect has missing dependencies: 'dispatch' and 'history'. Either include them or remove the dependency array.",["133"],"no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected",["130"],["131"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'errors' is assigned a value but never used.","'isFetching' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["134"],"React Hook useEffect has missing dependencies: 'dispatch', 'errorMessage', and 'history'. Either include them or remove the dependency array.",["135"],"no-mixed-operators","Unexpected mix of '||' and '&&'. Use parentheses to clarify the intended order of operations.","LogicalExpression","unexpectedMixedOperator","'getEmployeeLists' is defined but never used.","'history' is assigned a value but never used.",["136"],["137"],"no-global-assign","no-unsafe-negation",{"desc":"138","fix":"139"},{"desc":"140","fix":"141"},{"desc":"142","fix":"143"},{"desc":"144","fix":"145"},{"desc":"142","fix":"146"},{"desc":"144","fix":"147"},"Update the dependencies array to be: [dispatch, first_name, history.location]",{"range":"148","text":"149"},"Update the dependencies array to be: [dispatch, history, isError]",{"range":"150","text":"151"},"Update the dependencies array to be: [dispatch]",{"range":"152","text":"153"},"Update the dependencies array to be: [dispatch, errorMessage, history, isError, isSuccess]",{"range":"154","text":"155"},{"range":"156","text":"153"},{"range":"157","text":"155"},[780,798],"[dispatch, first_name, history.location]",[943,952],"[dispatch, history, isError]",[812,814],"[dispatch]",[1058,1078],"[dispatch, errorMessage, history, isError, isSuccess]",[812,814],[1058,1078]]